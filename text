Linux driver model

2.4 all driver subsystems were isolated
we needed to solve power management suspend/resume
	device naming

Pat Mochel and I worked on this

Almost no one ever needs to know any of this information in order to write a
driver for any specific device subsystem.



Bottom up

kref
	reference counting
	lock has to be outside of the object
	has to have a release function to free the object

kobjects
	reference counting
	sysfs representation
	data structure glue
		links between different kobjects and types of kobjects
	hotplug event handling


attributes
	- sysfs files for kobjects.
	- one value per file!
	- binary files for data the kernel does not touch
	- grouped together, almost never handle an attribute on its own.

kset
	a set of kobjects of the same "type" that belong to the same subsystem
	how you group kobjects together

kobj_type
	handles the release function for the kobject
	handles the sysfs functions for the kobject
	handles the namespace issues for the kobject (networking)



struct device

	all types of "devices" in the kernel get this structure
	automatic reference counting
	associated with a specific "bus" or "subsystem/class"



struct device_type
	- handles devices that need to be grouped togeher on a bus, yet are
	  different in some way
	USB
		devices, interfaces, endpoints, ports
		all are handled by the USB "bus" logic


struct device_driver
	- controls a specific type of device
	- probe/remove
	- shutdown/suspend/resume
	- default attributes



struct bus_type
	- how you group devices and drivers together
	- how drivers and devices for your bus match
	- uevent handling
	- shutdown handling for all bus devices




Work that a bus needs to do:
	register a bus_type
	create a device
		set the bus type to ours
		set up the parent pointer
		set up default sysfs attribute groups
		device_initialize()
		whatever else you need/want
		device_add()

		device_register() - init and add

	registering a driver
		set the bus type to ours
		set the probe/remove functions
		set up module ownership
		driver_register()

	suspend/resume
		if driver has suspend/resume, call it



Simplest bus = 300 lines code


struct class
	- my finest moment
	- user-visable types of devices
		- input, gpio, pwm, misc, tty, block
		- usually a device node
	- how is this not a bus!
		- it is, kind of, well, not really...
	- suspend/resume
	- release
	- default attributes

devices are associated with a class
	- device_create()
	- will handle /dev creation for you

Work a class has to do:
	- class_create() or class_register()
	- reserve major/minor
	- use in device_create()
	- device_destroy()
	- free major/minor
	- can handle suspend/resume

classes are very easy to use, 30 lines


shutdown:
	- if a device has a class, and class has shutdown, call it
	- if a device has a bus, and the bus has shutdown, call it
		- the bus will call a driver suspend if it has it.


Hints for driver writers:
	- never deal with attributes individually
		use attribute groups
		have your bus create/destroy them
			- if it doesn't, something is almost always buggy
	- should never need to call any driver core functions, and never ever any sysfs calls
		- sysfs_notify() - rare but needed for sysfs files that have changed state


for class writers:
	- use attribute groups
	- no sysfs files, use class_create()

for bus writers:
	- my apologies, it should be easier :(

For people wanting to just use sysfs:
	- don't.
	- really do not
	- no driver subsystem already?
	- please do not.
	- read the documentation
	- read it again
	- expect very tough review cycle
